---
- hosts: ec2-instances
  gather_facts: no
  remote_user: ubuntu
  become: yes
  become_user: root
  tasks:
    - name: This updates all packages to their latest version
      ansible.builtin.apt:
        name: "*"
        state: latest
      register: updating_the_servers
      tags: provisioning
- hosts: ec2-instances
  gather_facts: no
  remote_user: ubuntu
  become: yes
  become_user: root
  tasks:
    - name: Create a user 'jumia' with a bash shell, appending the group 'adm' and 'root' to the user's groups
      ansible.builtin.user:
        name: jumia
        shell: /bin/bash
        groups: root,adm
        append: yes
        generate_ssh_key: true
      register: create_user_in_adm_and_root_group
      tags: provisioning
- hosts: ec2-instances
  gather_facts: no
  remote_user: ubuntu
  become: yes
  become_user: root
  tasks:
    - name: This disables password authentication
      ansible.builtin.lineinfile:
        path: /etc/ssh/sshd_config
        regexp: '^PasswordAuthentication'
        line: 'PasswordAuthentication no'
        state: present
        backup: yes
      register: disables_password_authentication
      tags: provisioning
- hosts: ec2-instances
  gather_facts: no
  remote_user: ubuntu
  become: yes
  become_user: root
  tasks:
    - name: This disables rootlogin
      ansible.builtin.lineinfile:
        path: /etc/ssh/sshd_config
        regexp: '^PermitRootLogin'
        line: 'PermitRootLogin no'
        state: present
        backup: yes
      register: disables_password_authentication
      tags: provisioning
- hosts: microservice_db
  gather_facts: no
  remote_user: ubuntu
  become: yes
  become_user: root
  tasks:
    - name: Allow all access to tcp port 1337 for ssh from anywhere  
      community.general.ufw:
        rule: allow
        port: 1337
        proto: "tcp"
      tags: provisioning
- hosts: microservice_APP
  gather_facts: no
  remote_user: ubuntu
  become: yes
  become_user: root
  tasks:
    - name: Installing apache webserver for reverse proxy
      ansible.builtin.apt:
        name: nginx
        state: present
      tags: reverse_proxy
    - name: Copy the reverse-proxy.conf to the ansible server
      ansible.builtin.copy:
        src: ./reverse-proxy.conf
        dest: /etc/nginx/conf.d/reverse-proxy.conf
        owner: root
        group: root
        mode: '0644'
      tags: reverse_proxy 
  handlers:
    - name: Reload Apache
      service:
        name: nginx
        state: reloaded
      tags: reverse-proxy
    - name: Restart Apache
      service:
        name: nginx
        state: reverse-proxy
      tags: reverse-proxy



        #- hosts: microservice_db
        #gather_facts: no
        #remote_user: ubuntu
        #become: yes
        #become_user: root
        #tasks:
        #- name: Allow all request from any port of the microservice_app instance
        #community.general.ufw:
        #rule: allow
        #port: "any"
        #proto: tcp
        #src: 15.237.138.44
        #tags: provisioning
      
      
      
      
        #- hosts: microservice_APP
        #gather_facts: no
        #remote_user: ubuntu
        #become: yes
        #become_user: root
        #tasks:
        #- name: Allow all access to tcp port 1337 for ssh from anywhere
        #community.general.ufw:
        #rule: allow
        #port: 1337
        #proto: "any"
        #tags: provisioning
        #- hosts: microservice_db
        #gather_facts: no
        #remote_user: ubuntu
        #become: yes
        #become_user: root
        #tasks:
        #- name: Allow all request from any port of the microservice_app instance
        #community.general.ufw:
        #rule: allow
        #port: any
        #proto: "tcp"
        #from_ip: "{{ load_balancer_ip }}"
        #tags: provisioning
          #- name: This sets the authorized keys
          #ansible.posix.authorized_key:
          #user: ubuntu
          #state: present
          #key: "{{ lookup('file', '~/.ssh/devcha') }}"
          #register: set_authorized_key
          #tags: provisioning
